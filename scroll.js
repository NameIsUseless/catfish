// Generated by CoffeeScript 1.9.3
(function() {
  var getOffsetTop;

  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;


  /*
      get the top offset of given DOM element 
  
      @param {DOM Element} el
      @return {Number}
   */

  getOffsetTop = function(el) {
    var y;
    y = 0;
    while (el.offsetParent) {
      y += el.offsetTop;
      el = el.offsetParent;
    }
    return +y;
  };


  /*
      NScroll
      Better and style-controlable scroll bar for browser window and DOM element
  
      @param {String} selector
      @param {Object} option
          width
          bgc
          color
          radius
          stepSize
   */

  window.NScroll = function(selector, option) {
    var el, inner, outer, scrollInit;
    option = option || {};
    option.width = option.width || 5;
    option.bgc = option.bgc || null;
    option.color = option.color || '#000000';
    option.radius = option.radius || 5;
    option.stepSize = option.stepSize || 18;
    el = document.querySelectorAll(selector);
    el = el[0];
    el.style.position = 'relative';
    el.style.overflow = 'hidden';
    outer = el.clientHeight;
    inner = el.scrollHeight;

    /*
    Initialize the vitrual scroll, create DOM, bind events handlers
    @param {DOM Element} el
    @api private
     */
    scrollInit = function(el) {

      /*
      
          height of scroll bar
       */
      var animation_id, bar_height, isOverflow, mousedownHandler, mousemoveHandler, mouseupHandler, ratio, scr, scrMove, scr_bar, setScrAnimate, startTop, startY, wheelHandler;
      bar_height = outer * outer / inner;

      /*
      
          create and initialize DOM element and style of container of scroll
       */
      scr = document.createElement('div');
      console.log(scr.style);
      scr.style.position = 'absolute';
      scr.style.right = 0;
      scr.style.top = 0;
      scr.style.height = outer + 'px';
      scr.style.width = option.width + 'px';
      scr.style.backgroundColor = option.bgc;

      /*
      
          DOM element of scroll bar
       */
      scr_bar = document.createElement('div');
      scr_bar.style.position = 'absolute';
      scr_bar.style.top = 0;
      scr_bar.style.right = 0;
      console.log(bar_height);
      scr_bar.style.height = bar_height + 'px';
      scr_bar.style.width = option.width + 'px';
      scr_bar.style.backgroundColor = option.color;
      scr_bar.style.borderRadius = option.radius + 'px';
      el.appendChild(scr);
      scr.appendChild(scr_bar);

      /*
      
          global vars
       */

      /*
      
          position when mouse down
       */
      startY = 0;

      /*
      
          position when mousewheel started
       */
      startTop = 0;

      /*
      
          ratio of content height to container height
       */
      ratio = outer / inner;
      animation_id = 0;

      /*
      
          move the scroll to the given position, computing and set the content position 
          
          @param {Number} pos
       */
      scrMove = function(pos) {
        scr.style.top = pos / ratio + 'px';
        scr_bar.style.top = pos + 'px';
        return el.scrollTop = pos / ratio;
      };

      /*
      
          handle of mousemove event
          move scroll to the position of mouse pointer
      
          @param {Event} e
       */
      mousemoveHandler = function(e) {
        var curTop, dy, target, y;
        target = e.target;
        y = e.clientY;
        dy = y - startY;
        curTop = startTop + dy < 0 ? 0 : startTop + dy > outer - bar_height ? outer - bar_height : startTop + dy;
        scrMove(curTop);
        return e.preventDefault();
      };
      mouseupHandler = function(e) {
        return window.removeEventListener('mousemove', mousemoveHandler);
      };
      mousedownHandler = function(e) {
        var target;
        target = e.target;
        startY = e.clientY;
        startTop = scr_bar.offsetTop;
        if (target === scr_bar) {
          window.addEventListener('mousemove', mousemoveHandler, false);
          e.preventDefault();
          return false;
        }
        scr_bar.style.top = (e.clientY > outer - bar_height ? outer - bar_height : e.clientY) + 'px';
        return e.preventDefault();
      };

      /*
      
          @param {DOM} el
          @param {Number} direction: 1 -> up
                                     -1 -> down
      
          @return {Bool}
       */
      isOverflow = function(el, direction) {
        var bottom, scroll_top;
        scroll_top = el.scrollTop;
        if (direction === 1) {
          return (scroll_top > 0 ? true : false);
        }
        bottom = inner - scroll_top - outer;
        return (bottom > 0 ? true : false);
      };

      /*
      
          Animate function
      
          @param {DOM} el
          @param {Number} dy
       */
      setScrAnimate = function(el, dy) {
        var acc, finished, step, y_step;
        finished = 0;
        y_step = dy / 20;
        acc = y_step / 40;
        step = function() {
          var top;
          if (isOverflow(el, -dy / Math.abs(dy))) {
            top = el.scrollTop * ratio;
            finished += y_step;
            scrMove(top + y_step);
            if (y_step / acc > 1) {
              y_step -= acc;
              if (finished / dy < 1 && isOverflow(el, dy / Math.abs(dy))) {
                animation_id = requestAnimationFrame(step);
              }
            }
          }
          return false;
        };
        if (isOverflow(el, -dy / Math.abs(dy))) {
          return animation_id = requestAnimationFrame(step);
        }
      };

      /*
      
          @param {Event} e
       */
      wheelHandler = function(e) {
        var deltaY, target;
        target = e.target;
        deltaY = -e.wheelDeltaY || 0;
        deltaY || (deltaY = -e.wheelDelta || 0);
        Math.abs(deltaY) > 1.2 && (deltaY *= option.stepSize / 120);
        e.preventDefault();
        return setScrAnimate(el, deltaY);
      };
      scr.addEventListener('mousedown', mousedownHandler);
      window.addEventListener('mouseup', mouseupHandler);
      return el.addEventListener('mousewheel', wheelHandler);
    };
    return scrollInit(el);
  };

}).call(this);
